{"version":3,"sources":["components/grid-components/random.js","components/grid-components/result.js","components/grid-components/timer.js","components/grid.js","components/grid-components/start.js","App.js","serviceWorker.js","index.js"],"names":["shuffledNumber","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","Result","react_default","a","createElement","id","this","props","currentNumber","react_router_dom","to","component","Grid","onClick","reset","Component","Timer","state","minutes","seconds","_this2","myInterval","setInterval","_this2$state","setState","_ref","clearInterval","_ref2","_this$state","react_router","concat","_this","map","num","className","clicked","click","console","log","timer_Timer","Start","App","clickHandler","number","resetScore","exact","path","render","grid_components_start","components_grid","grid_components_result","React","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb06234a.chunk.js","sourcesContent":["let randomNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\n    50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n\nconst shuffle = (array) => {\n\n    let currentIndex = array.length;\n    let temporaryValue, randomIndex;\n\n    while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n\n};\n\nlet shuffledNumber = shuffle(randomNumbers);\n\nexport {shuffledNumber}","import React, { Component } from 'react';\nimport './result.css'\nimport { Link } from \"react-router-dom\"\nimport Grid from \"../grid\"\n\nclass Result extends Component {\n\n    \n    \n    render() {\n\n        return (\n            <div id=\"result\">\n                <div id=\"score\">\n                { this.props.currentNumber === -1\n                    ? <h3>Result: 0</h3>\n                    : <h3>Result: {this.props.currentNumber}</h3>\n                }\n                </div>\n                <div id=\"tryAgain\">\n                <Link id=\"tryAgainButton\" to=\"/grid/\" component={Grid} onClick={this.props.reset}><span>Try Again</span></Link>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Result;","import React, { Component } from 'react'\nimport { Redirect } from \"react-router-dom\"\nimport Result from \"./result.js\"\n\nexport default class Timer extends Component {\n    state = {\n        minutes: 1,\n        seconds: 30,\n    }\n\n    componentDidMount() {\n        this.myInterval = setInterval(() => {\n            const { seconds, minutes } = this.state\n\n            if (seconds > 0) {\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    clearInterval(this.myInterval)\n                } else {\n                    this.setState(({ minutes }) => ({\n                        minutes: minutes - 1,\n                        seconds: 59\n                    }))\n                }\n            } \n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n\n    render() {\n        const { minutes, seconds } = this.state\n        return (\n            <div>\n                {  this.props.currentNumber === -1\n                    ? <p>Score: 0</p>\n                    : <p>Score: {this.props.currentNumber}</p>\n                }\n                { minutes === 0 && seconds === 0\n                    ? < Redirect id=\"result\" to=\"/grid/result\" component={Result} />\n                    : <p>Time Remaining: {minutes}:{seconds < 10 ? `0${seconds}` : seconds}</p>\n                }\n\n\n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport { shuffledNumber } from './grid-components/random';\nimport './grid.css'\nimport Timer from './grid-components/timer'\n\nclass Grid extends Component {\n\n   \n\n    render() {\n\n\n        return (\n            <div id=\"gridContainer\">\n                \n\n                {shuffledNumber.map((num) => {\n                    return (\n                        <button \n                        className={this.props.clicked && (num === this.props.currentNumber) ? \"numberBoxClicked\": \"numberBox\"}  onClick={() => this.props.click(num)} >{num} \n                        </button>\n                    )\n                }\n                )}\n                {console.log(this.props.currentNumber)}\n                <div id=\"timeRemaining\">\n                <Timer currentNumber={this.props.currentNumber}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Grid;","import React, { Component } from 'react';\nimport './start.css'\nimport { Link } from \"react-router-dom\"\nimport Grid from \"../grid\"\n\nclass Start extends Component {\n    \n    render() {\n\n        return (\n            <div id=\"start\">\n                <div id=\"instructions\">\n                <h3 id=\"instructionsHeader\">Instructions</h3>\n                <p id=\"instructionsPara\">When you press start you will have 90 seconds to hit as many numbers as possible in ascending order. The last number will be your recorded score.</p>\n                </div>\n                <Link id=\"startButton\" to=\"/grid/\" component={Grid} onClick={this.props.reset}><span>Start</span></Link>\n            </div>\n        )\n    }\n}\n\nexport default Start;","import React from 'react';\nimport {BrowserRouter as Router, Route } from \"react-router-dom\"\nimport './App.css';\nimport Grid from \"./components/grid\"\nimport Result from \"./components/grid-components/result.js\"\nimport Start from \"./components/grid-components/start\"\n\nclass App extends React.Component {\n\n  state = {\n    currentNumber: -1,\n    clicked: false\n}\n\nclickHandler = (number) => {\n  if (number === this.state.currentNumber + 1) {\n \n  this.setState({currentNumber: number, clicked: true}) \n}\n}\n\nresetScore = () => {\n  this.setState({currentNumber: -1, clicked: false})\n}\n\nrender() {\n  return (\n    <div className=\"container\">\n      <Router>\n      <h1 id=\"numberGridHeader\">Number Grid</h1>\n      <Route id=\"start\" exact path=\"/\" render={() => <Start/>}></Route>\n      {/* <Route path=\"/\" exact component={LogIn} /> */}\n      <Route id=\"grid\" exact path=\"/grid\" render={() => <Grid clicked = {this.state.clicked} currentNumber = {this.state.currentNumber} click = {this.clickHandler}/>} />\n      <Route id=\"result\" exact path=\"/grid/result\" render={() => <Result reset = {this.resetScore}currentNumber = {this.state.currentNumber} />} />\n      </Router>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}